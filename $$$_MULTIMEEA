//+------------------------------------------------------------------+
//|                      BuySellEma.mq5 (Trend EMA Filter)           |
//|             Modified by ChatGPT (2025)                           |
//+------------------------------------------------------------------+
#property copyright "Copyright 2022, Orchard Forex"
#property link      "https://www.orchardforex.com"
#property version   "1.01"

#include <Trade/Trade.mqh>

// INPUTS
input int                InpFastMABars         = 20;
input ENUM_MA_METHOD     InpFastMAMethod       = MODE_EMA;
input ENUM_APPLIED_PRICE InpFastMAAppliedPrice = PRICE_CLOSE;

input int                InpSlowMABars         = 50;
input ENUM_MA_METHOD     InpSlowMAMethod       = MODE_EMA;
input ENUM_APPLIED_PRICE InpSlowMAAppliedPrice = PRICE_CLOSE;
input int                InpSlowMAShift        = 0;

input ENUM_MA_METHOD     InpTrendMAMethod       = MODE_EMA;      // Metoda średniej (EMA, SMA, itd.)
input ENUM_APPLIED_PRICE InpTrendMAAppliedPrice = PRICE_CLOSE;   // Typ ceny (Close, Open, itd.)
input int                InpTrendMABars         = 80;            // Okres średniej trendu



input double             InpOrderSize          = 01.0;
input double             InpTakeProfitPips     = 20.0;
input double             InpStopLossPips       = 30.0;
input double             InpTrailingStopPips   = 7.0;

input int                InpMagic              = 222222;
input string             InpTradeComment       = "MA Cross + Trend Filter";

input bool enableTimePeriod1 = true;
input bool enableTimePeriod2 = false;
input int startHour1 = 7, startMinute1 = 0, endHour1 = 23, endMinute1 = 0;
input int startHour2 = 15, startMinute2 = 0, endHour2 = 22, endMinute2 = 0;

// GLOBALS
double TakeProfit, StopLoss, TrailingStop;
int FastHandle, SlowHandle, TrendHandle;
double FastBuffer[], SlowBuffer[], TrendBuffer[];

CTrade Trade;
CPositionInfo Position;

// UTILS
double PipSize() {
   double point = SymbolInfoDouble(Symbol(), SYMBOL_POINT);
   int digits = (int)SymbolInfoInteger(Symbol(), SYMBOL_DIGITS);
   return ((digits % 2) == 1) ? point * 10 : point;
}

double PipsToDouble(double pips) { return (pips * PipSize()); }

bool IsNewBar(bool first_call = false) {
   static bool result = false;
   if (!first_call) return result;
   static datetime previous_time = 0;
   datetime current_time = iTime(Symbol(), Period(), 0);
   result = false;
   if (previous_time != current_time) {
      previous_time = current_time;
      result = true;
   }
   return result;
}

bool IsTimeToTrade() {
   MqlDateTime time;
   TimeToStruct(TimeCurrent(), time);
   int currentTime = time.hour * 60 + time.min;
   int startTime1 = startHour1 * 60 + startMinute1;
   int endTime1 = endHour1 * 60 + endMinute1;
   int startTime2 = startHour2 * 60 + startMinute2;
   int endTime2 = endHour2 * 60 + endMinute2;

   bool inTimePeriod1 = (currentTime >= startTime1 && currentTime <= endTime1) && enableTimePeriod1;
   bool inTimePeriod2 = (currentTime >= startTime2 && currentTime <= endTime2) && enableTimePeriod2;

   return inTimePeriod1 || inTimePeriod2;
}

bool IsMarketOpen() {
   return (bool)MQLInfoInteger(MQL_TRADE_ALLOWED) &&
          (bool)TerminalInfoInteger(TERMINAL_TRADE_ALLOWED) &&
          (bool)AccountInfoInteger(ACCOUNT_TRADE_ALLOWED) &&
          (bool)AccountInfoInteger(ACCOUNT_TRADE_EXPERT);
}

bool IsTradeAllowed() {
   return (bool)MQLInfoInteger(MQL_TRADE_ALLOWED) &&
          (bool)TerminalInfoInteger(TERMINAL_TRADE_ALLOWED) &&
          (bool)AccountInfoInteger(ACCOUNT_TRADE_ALLOWED) &&
          (bool)AccountInfoInteger(ACCOUNT_TRADE_EXPERT);
}

// INIT
int OnInit() {
   TakeProfit = PipsToDouble(InpTakeProfitPips);
   StopLoss = PipsToDouble(InpStopLossPips);
   TrailingStop = PipsToDouble(InpTrailingStopPips);

   Trade.SetExpertMagicNumber(InpMagic);

   FastHandle = iMA(Symbol(), Period(), InpFastMABars, 0, InpFastMAMethod, InpFastMAAppliedPrice);
   SlowHandle = iMA(Symbol(), Period(), InpSlowMABars, 0, InpSlowMAMethod, InpSlowMAAppliedPrice);
   TrendHandle = iMA(Symbol(), Period(), InpTrendMABars, 0, InpTrendMAMethod, InpTrendMAAppliedPrice);

   ArraySetAsSeries(FastBuffer, true);
   ArraySetAsSeries(SlowBuffer, true);
   ArraySetAsSeries(TrendBuffer, true);

   if (FastHandle == INVALID_HANDLE || SlowHandle == INVALID_HANDLE || TrendHandle == INVALID_HANDLE) {
      Print("Error creating MA handles");
      return INIT_FAILED;
   }

   IsNewBar(true);
   return INIT_SUCCEEDED;
}

void OnDeinit(const int reason) {
   IndicatorRelease(FastHandle);
   IndicatorRelease(SlowHandle);
   IndicatorRelease(TrendHandle);
}

// MAIN LOGIC
void OnTick() {
   if (!IsTradeAllowed() || !IsMarketOpen() || !IsTimeToTrade()) return;
   if (TrailingStop > 0) ApplyTrailingStop();
   if (!IsNewBar(true)) return;

   if (CopyBuffer(FastHandle, 0, 0, 3, FastBuffer) < 3) return;
   if (CopyBuffer(SlowHandle, 0, InpSlowMAShift, 3, SlowBuffer) < 3) return;
   if (CopyBuffer(TrendHandle, 0, 1, 1, TrendBuffer) < 1) return;

   double currentPrice = iClose(Symbol(), Period(), 1);
   double trendEma = TrendBuffer[0];

// BUY: przecięcie od dołu ponad slow MA, a przecięcie nastąpiło powyżej EMA 80
if ((FastBuffer[1] > SlowBuffer[1]) && !(FastBuffer[2] > SlowBuffer[2]) &&
    FastBuffer[1] > trendEma && SlowBuffer[1] > trendEma) {
    OpenTrade(ORDER_TYPE_BUY);
}

// SELL: przecięcie od góry poniżej slow MA, a przecięcie nastąpiło poniżej EMA 80
if ((FastBuffer[1] < SlowBuffer[1]) && !(FastBuffer[2] < SlowBuffer[2]) &&
    FastBuffer[1] < trendEma && SlowBuffer[1] < trendEma) {
    OpenTrade(ORDER_TYPE_SELL);
}

}

// OPEN TRADE
void OpenTrade(ENUM_ORDER_TYPE type) {
   double price, sl, tp;
   if (type == ORDER_TYPE_BUY) {
      price = SymbolInfoDouble(Symbol(), SYMBOL_ASK);
      sl = price - StopLoss;
      tp = price + TakeProfit;
   } else {
      price = SymbolInfoDouble(Symbol(), SYMBOL_BID);
      sl = price + StopLoss;
      tp = price - TakeProfit;
   }

   price = NormalizeDouble(price, Digits());
   sl = (StopLoss == 0) ? 0 : NormalizeDouble(sl, Digits());
   tp = (TakeProfit == 0) ? 0 : NormalizeDouble(tp, Digits());

   if (!Trade.PositionOpen(Symbol(), type, InpOrderSize, price, sl, tp, InpTradeComment)) {
      Print("Open failed: ", EnumToString(type), " price=", price, " sl=", sl, " tp=", tp);
   }
}

// TRAILING STOP
void ApplyTrailingStop() {
   double ask = SymbolInfoDouble(Symbol(), SYMBOL_ASK);
   double bid = SymbolInfoDouble(Symbol(), SYMBOL_BID);
   double buyTS = ask - TrailingStop;
   double sellTS = bid + TrailingStop;

   for (int i = PositionsTotal() - 1; i >= 0; i--) {
      ulong ticket = PositionGetTicket(i);
      if (!PositionSelectByTicket(ticket)) continue;
      if (Position.Symbol() != Symbol() || Position.Magic() != InpMagic) continue;

      if (Position.PositionType() == POSITION_TYPE_BUY && buyTS > Position.PriceOpen() &&
         (Position.StopLoss() == 0 || buyTS > Position.StopLoss())) {
         Trade.PositionModify(ticket, buyTS, Position.TakeProfit());
      }

      if (Position.PositionType() == POSITION_TYPE_SELL && sellTS < Position.PriceOpen() &&
         (Position.StopLoss() == 0 || sellTS < Position.StopLoss())) {
         Trade.PositionModify(ticket, sellTS, Position.TakeProfit());
      }
   }
}
