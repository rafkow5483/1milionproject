#property copyright "Copyright 2021, Orchard Forex"
#property link      "https://www.orchardforex.com"
#property version   "1.00"
#property strict

#include <Trade/Trade.mqh>
class CTradeCustom : public CTrade {};

#include <Trade/PositionInfo.mqh>
class CPositionInfoCustom : public CPositionInfo {
public:
    int Count(string symbol, long magic);
};

CTradeCustom Trade;
CPositionInfoCustom PositionInfo;

int CPositionInfoCustom::Count(string symbol, long magic) {
    int result = 0;
    int count = PositionsTotal();
    for (int i = count - 1; i >= 0; i--) {
        if (PositionGetTicket(i) <= 0) continue;
        if (CPositionInfo::Symbol() == symbol && CPositionInfo::Magic() == magic) result++;
    }
    return (result);
}

struct STargetPrice {
    ENUM_ORDER_TYPE type;
    double entryPrice;
    double sl;
    double tp;
};

// Some inputs
// Moving average
input ENUM_TIMEFRAMES InpAnchorTimeframe = PERIOD_M5; // Anchor Timeframe
input int InpAnchorFastPeriod = 5; // Anchor Fast MA Period
input ENUM_MA_METHOD InpAnchorFastMethod = MODE_SMA; // Anchor Fast MA Method
input ENUM_APPLIED_PRICE InpAnchorFastAppliedPrice = PRICE_CLOSE; // Anchor Fast MA Applied price
input int InpAnchorSlowPeriod = 50; // Anchor Slow MA Period
input ENUM_MA_METHOD InpAnchorSlowMethod = MODE_SMA; // Anchor Slow MA Method
input ENUM_APPLIED_PRICE InpAnchorSlowAppliedPrice = PRICE_CLOSE; // Anchor Slow MA Applied price

// Main 3 averages
input int InpMainFastPeriod = 25; // Main Fast MA Period
input ENUM_MA_METHOD InpMainFastMethod = MODE_SMA; // Main Fast MA Method
input ENUM_APPLIED_PRICE InpMainFastAppliedPrice = PRICE_CLOSE; // Main Fast MA Applied price
input int InpMainSlowPeriod = 250; // Main Slow MA Period
input ENUM_MA_METHOD InpMainSlowMethod = MODE_SMA; // Main Slow MA Method
input ENUM_APPLIED_PRICE InpMainSlowAppliedPrice = PRICE_CLOSE; // Main Slow MA Applied price

// Input point High/Low of previous candles
input int InpEntryLookback = 50; // Entry price lookback
input int InpEntryOffsetPoints = -20; // Entry price offset

// For the tp/sl
input double InpRatio = 1.25; // P/L ratio

// General items
input double InpOrderSize = 0.01; // Order size
input int InpMagicNumber = 212121; // Magic number
input string InpTradeComment = __FILE__; // Trade comment

// For inputs that need one time conversion
double GEntryOffset;

// This is where I use the modular indicator classes
// Include the indicator classes
#property copyright "Copyright 2021, Orchard Forex"
#property link      "https://orchardforex.com"
#property version   "1.00"

class CIndicatorBase {
private:
protected:
    // Control values
    bool mInitialised;
    // Values used by MQL4
    string mSymbol;
    int mTimeframe;
    // Handle and buffer used by MQL5
    int mHandle;
    double mBuffer[];

public:
    CIndicatorBase();
    ~CIndicatorBase();
    bool IsValid() { return (mHandle != INVALID_HANDLE); }
    int GetArray(int bufferNumber, int start, int count, double &arr[]); // Retrieve an array of values
    virtual double GetValue(int bufferNumber, int index); // Retrieve a single value
    virtual double GetValue(int index) { return (GetValue(0, index)); } // Some indicators have only 1 buffer
};

CIndicatorBase::CIndicatorBase() {
    // Set initialised to false, the child classes should fix this
    mInitialised = false;
    // Init the common values, basically to say this hasn't been initialised
    mSymbol = Symbol();
    mTimeframe = Period();
    // Child classes will set the handle
    mHandle = 0;
    ArraySetAsSeries(mBuffer, true);
}

CIndicatorBase::~CIndicatorBase() {
#ifdef __MQL5__
    IndicatorRelease(mHandle);
#endif
}

#ifdef __MQL5__
double CIndicatorBase::GetValue(int bufferNumber, int index) {
    int result = CopyBuffer(mHandle, bufferNumber, index, 1, mBuffer);
    if (result < 1) return (0);
    return (mBuffer[0]);
}

int CIndicatorBase::GetArray(int bufferNumber, int start, int count, double &arr[]) {
    ArraySetAsSeries(arr, true);
    int result = CopyBuffer(mHandle, bufferNumber, start, count, arr);
    return (result);
}
#endif

class CIndicatorMA : public CIndicatorBase {
private:
protected:
    int mPeriod;
    int mShift;
    ENUM_MA_METHOD mMethod;
    int mAppliedPrice;

public:
    CIndicatorMA() : CIndicatorBase() {};
    CIndicatorMA(string symbol, int timeframe, int period, ENUM_MA_METHOD method, int appliedPrice);
    ~CIndicatorMA();
    void Init(string symbol, int timeframe, int period, ENUM_MA_METHOD method, int appliedPrice);
};

CIndicatorMA::CIndicatorMA(string symbol, int timeframe, int period, ENUM_MA_METHOD method, int appliedPrice)
    : CIndicatorBase() {
    Init(symbol, timeframe, period, method, appliedPrice);
}

CIndicatorMA::~CIndicatorMA() {}

void CIndicatorMA::Init(string symbol, int timeframe, int period, ENUM_MA_METHOD method, int appliedPrice) {
    mSymbol = symbol;
    mTimeframe = timeframe;
    mPeriod = period;
    mShift = 0;
    mMethod = method;
    mAppliedPrice = appliedPrice;
#ifdef __MQL5__
    mHandle = iMA(symbol, (ENUM_TIMEFRAMES)timeframe, period, 0, method, appliedPrice);
#endif
    mInitialised = true;
}

CIndicatorMA MAAnchorFast;
CIndicatorMA MAAnchorSlow;
CIndicatorMA MAMainFast;
CIndicatorMA MAMainSlow;
STargetPrice gTarget;

int OnInit() {
    if (PeriodSeconds(InpAnchorTimeframe) <= PeriodSeconds(Period())) {
        PrintFormat("You must select an anchor timeframe higher than the current chart. Current=%s, selected=%s", EnumToString((ENUM_TIMEFRAMES)Period()), EnumToString(InpAnchorTimeframe));
        return (INIT_PARAMETERS_INCORRECT);
    }

    GEntryOffset = InpEntryOffsetPoints * SymbolInfoDouble(Symbol(), SYMBOL_POINT);
    Trade.SetExpertMagicNumber(InpMagicNumber);
    MAAnchorFast.Init(Symbol(), InpAnchorTimeframe, InpAnchorFastPeriod, InpAnchorFastMethod, InpAnchorFastAppliedPrice);
    MAAnchorSlow.Init(Symbol(), InpAnchorTimeframe, InpAnchorSlowPeriod, InpAnchorSlowMethod, InpAnchorSlowAppliedPrice);
    MAMainFast.Init(Symbol(), Period(), InpMainFastPeriod, InpMainFastMethod, InpMainFastAppliedPrice);
    MAMainSlow.Init(Symbol(), Period(), InpMainSlowPeriod, InpMainSlowMethod, InpMainSlowAppliedPrice);
    NewBar();
    gTarget.entryPrice = 0;
    return (INIT_SUCCEEDED);
}

void OnDeinit(const int reason) {
    // Nothing to do here now, common toolbox took care of it
}

void OnTick() {
    // Sprawdzenie, czy handel jest dozwolony
    if (!TerminalInfoInteger(TERMINAL_TRADE_ALLOWED)) return;
    if (!MQLInfoInteger(MQL_TRADE_ALLOWED)) return;
    if (!AccountInfoInteger(ACCOUNT_TRADE_EXPERT)) return;
    if (!AccountInfoInteger(ACCOUNT_TRADE_ALLOWED)) return;

    // Pobieranie wartości kotwicy dla szybkiej i wolnej średniej kroczącej
    double anchorFast = MAAnchorFast.GetValue(1);
    double anchorSlow = MAAnchorSlow.GetValue(1);

    // Sprawdzanie trendu na wyższym interwale czasowym
    bool upTrend = anchorFast > anchorSlow;
    bool downTrend = anchorFast < anchorSlow;

    double mainFast = MAMainFast.GetValue(1);
    double mainSlow = MAMainSlow.GetValue(1);

    static double lastMainFastValue = MAMainFast.GetValue(2);
    static double lastMainSlowValue = MAMainSlow.GetValue(2);

    // Sprawdzenie przecięcia średnich kroczących na niższym interwale czasowym dla zamykania pozycji
    CheckForCrossAndClose();

    // Sprawdzenie przecięcia średnich kroczących na niższym interwale czasowym dla otwierania pozycji
    if ((lastMainFastValue < lastMainSlowValue && mainFast > mainSlow && upTrend) ||
        (lastMainFastValue > lastMainSlowValue && mainFast < mainSlow && downTrend)) {
        // Jeśli nastąpiło przecięcie
        ENUM_ORDER_TYPE tradeType = (mainFast > mainSlow) ? ORDER_TYPE_BUY : ORDER_TYPE_SELL;

        // Otwórz nową pozycję
        PrepareTrade(tradeType);
    }

    // Aktualizacja wartości dla następnego ticka
    lastMainFastValue = mainFast;
    lastMainSlowValue = mainSlow;
}

void PrepareTrade(ENUM_ORDER_TYPE type) {
    double price = (type == ORDER_TYPE_BUY) ? SymbolAsk() : SymbolBid();
    double sl = (type == ORDER_TYPE_BUY) ? price - 500 * _Point : price + 500 * _Point;
    double tp = (type == ORDER_TYPE_BUY) ? price + 500 * _Point : price - 500 * _Point;

    if (!Trade.PositionOpen(Symbol(), type, InpOrderSize, price, sl, tp, InpTradeComment)) {
        PrintFormat("Error %i placing order type %s", GetLastError(), EnumToString(type));
    }
}


void OpenAtTarget() {
    if (gTarget.entryPrice == 0) return;
    if (gTarget.type == ORDER_TYPE_BUY) {
        if (SymbolAsk() >= gTarget.entryPrice) {
            OpenTrade();
            gTarget.entryPrice = 0;
        }
    } else {
        if (SymbolBid() <= gTarget.entryPrice) {
            OpenTrade();
            gTarget.entryPrice = 0;
        }
    }
}

void OpenTrade() {
    if (gTarget.entryPrice == 0) return;
    ENUM_ORDER_TYPE type = gTarget.type;
    double price = NormalizeDouble(gTarget.entryPrice, Digits());
    double sl = NormalizeDouble(gTarget.sl, Digits());
    double tp = NormalizeDouble(gTarget.tp, Digits());

    if (!Trade.PositionOpen(Symbol(), type, InpOrderSize, price, sl, tp, InpTradeComment)) {
        PrintFormat("Error %i placing order type %s", GetLastError(), EnumToString(type));
    }
}

void CheckForCrossAndClose() {
    double mainFast = MAMainFast.GetValue(1);
    double mainSlow = MAMainSlow.GetValue(1);

    static double lastMainFastValue = MAMainFast.GetValue(2);
    static double lastMainSlowValue = MAMainSlow.GetValue(2);

    if (lastMainFastValue < lastMainSlowValue && mainFast > mainSlow) {
        // Przecięcie w górę - zamknij pozycję SELL
        CloseOppositePosition(ORDER_TYPE_BUY);
    } else if (lastMainFastValue > lastMainSlowValue && mainFast < mainSlow) {
        // Przecięcie w dół - zamknij pozycję BUY
        CloseOppositePosition(ORDER_TYPE_SELL);
    }

    // Aktualizacja wartości dla następnego ticka
    lastMainFastValue = mainFast;
    lastMainSlowValue = mainSlow;
}

void CloseOppositePosition(ENUM_ORDER_TYPE type) {
    ENUM_POSITION_TYPE oppositeType = (type == ORDER_TYPE_BUY) ? POSITION_TYPE_SELL : POSITION_TYPE_BUY;
    for (int i = PositionsTotal() - 1; i >= 0; i--) {
        if (PositionGetTicket(i) > 0 && PositionGetInteger(POSITION_TYPE) == oppositeType && PositionGetString(POSITION_SYMBOL) == Symbol()) {
            Trade.PositionClose(PositionGetInteger(POSITION_TICKET));
        }
    }
}


bool NewBar() {
    static datetime prevTime = 0;
    datetime now = iTime(Symbol(), Period(), 0);
    if (now == prevTime) return (false);
    prevTime = now;
    return (true);
}

bool WaitForHTF(string symbol, ENUM_TIMEFRAMES timeframe) {
    for (int waitCount = 9; waitCount >= 0; waitCount--) {
        datetime t = iTime(symbol, timeframe, 0);
        int err = GetLastError();
        if (t > 0) return (true);
        Sleep(100);
    }
    return (false);
}

// Symbol values - also a candidate for common toolbox
double SymbolAsk() { return (SymbolInfoDouble(Symbol(), SYMBOL_ASK)); }
double SymbolBid() { return (SymbolInfoDouble(Symbol(), SYMBOL_BID)); }
