#include <Trade\Trade.mqh>

input int maPeriod = 100;
input double pipDistance = 10.0;
input double lotSize = 0.1;


input bool enableTimePeriod1 = true; // Domyślnie włączone
input bool enableTimePeriod2 = false; // Domyślnie włączone

// Definicja zmiennych input dla czasów startu i końca
input int startHour1 = 15;
input int startMinute1 = 0;
input int endHour1 = 23;
input int endMinute1 = 0;

input int startHour2 = 15;
input int startMinute2 = 0;
input int endHour2 = 22;
input int endMinute2 = 0;


// Funkcja sprawdzająca, czy obecny czas mieści się w określonym przedziale
bool IsTimeToTrade() {
    MqlDateTime time;
    TimeToStruct(TimeCurrent(), time);

    // Konwersja do minut od północy
    int startTime1 = startHour1 * 60 + startMinute1;
    int endTime1 = endHour1 * 60 + endMinute1;
    int startTime2 = startHour2 * 60 + startMinute2;
    int endTime2 = endHour2 * 60 + endMinute2;
    int currentTime = time.hour * 60 + time.min;

    bool inTimePeriod1 = (currentTime >= startTime1 && currentTime <= endTime1) && enableTimePeriod1;
    bool inTimePeriod2 = (currentTime >= startTime2 && currentTime <= endTime2) && enableTimePeriod2;

    // Sprawdzenie czy bieżący czas mieści się w aktywnych przedziałach
    return inTimePeriod1 || inTimePeriod2;
}


CTrade trade;

int maHandle;
double emaBuffer[];

// Pipsy automatyczne
double PipValue()
{
   if (_Digits == 5 || _Digits == 3)
      return 0.00010;
   else if (_Digits == 2 || _Digits == 4)
      return 0.01;
   return 0.0001;
}

int OnInit()
{
   maHandle = iMA(_Symbol, PERIOD_CURRENT, maPeriod, 0, MODE_EMA, PRICE_CLOSE);
   if (maHandle == INVALID_HANDLE)
   {
      Print("Nie można uzyskać uchwytu EMA");
      return INIT_FAILED;
   }

   Print("Bot EMA (BUY/SELL) zainicjalizowany");
   return INIT_SUCCEEDED;
}

void OnTick()
{

   if (!IsTimeToTrade()) return; // Jeśli nie, wyjdź z funkcji

   // Pobierz wartość EMA z bufora
   if (CopyBuffer(maHandle, 0, 0, 1, emaBuffer) <= 0)
   {
      Print("Nie można pobrać danych EMA. Error: ", GetLastError());
      return;
   }

   double ema = emaBuffer[0];
   double price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double pip = PipValue();
   double diff = price - ema;

   bool positionOpen = PositionSelect(_Symbol);

   if (!positionOpen)
   {
      // Warunek BUY
      if (diff > pip * pipDistance)
      {
         if (trade.Buy(lotSize, _Symbol))
            Print("BUY otwarty. Cena: ", price, " EMA: ", ema);
         else
            Print("Błąd otwarcia BUY: ", GetLastError());
      }

      // Warunek SELL
      if (diff < -pip * pipDistance)
      {
         if (trade.Sell(lotSize, _Symbol))
            Print("SELL otwarty. Cena: ", price, " EMA: ", ema);
         else
            Print("Błąd otwarcia SELL: ", GetLastError());
      }
   }
   else
   {
      long positionType;
      if (PositionGetInteger(POSITION_TYPE, positionType))
      {
         // Jeśli BUY i cena spada poniżej EMA o 10 pipsów => zamykamy
         if (positionType == POSITION_TYPE_BUY && diff < -pip * pipDistance)
         {
            if (trade.PositionClose(_Symbol))
               Print("BUY zamknięty. Cena: ", price, " EMA: ", ema);
            else
               Print("Błąd zamknięcia BUY: ", GetLastError());
         }

         // Jeśli SELL i cena rośnie powyżej EMA o 10 pipsów => zamykamy
         if (positionType == POSITION_TYPE_SELL && diff > pip * pipDistance)
         {
            if (trade.PositionClose(_Symbol))
               Print("SELL zamknięty. Cena: ", price, " EMA: ", ema);
            else
               Print("Błąd zamknięcia SELL: ", GetLastError());
         }
      }
   }
}
