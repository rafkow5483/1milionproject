//+------------------------------------------------------------------+
//| Expert Advisor: EMA Cross → Retrace → SELL + Czas dzienny       |
//+------------------------------------------------------------------+

// ==== Parametry logiki MA ====
input int FastMAPeriod = 20;
input int SlowMAPeriod = 120;
input double LotSize = 0.1;
input int Slippage = 5;
input int RetracePips = 10;

// ==== TP/SL ====
input int TP_Pips = 20;
input int SL_Pips = 20;

// ==== Harmonogram tygodniowy ====
input bool enableMonday = true;
input int monStartHour = 1;
input int monStartMinute = 0;
input int monEndHour = 23;
input int monEndMinute = 0;

input bool enableTuesday = true;
input int tueStartHour = 1;
input int tueStartMinute = 0;
input int tueEndHour = 23;
input int tueEndMinute = 0;

input bool enableWednesday = true;
input int wedStartHour = 1;
input int wedStartMinute = 0;
input int wedEndHour = 23;
input int wedEndMinute = 0;

input bool enableThursday = true;
input int thuStartHour = 1;
input int thuStartMinute = 0;
input int thuEndHour = 23;
input int thuEndMinute = 0;

input bool enableFriday = true;
input int friStartHour = 1;
input int friStartMinute = 0;
input int friEndHour = 23;
input int friEndMinute = 0;

// ==== Zmienne wewnętrzne ====
int fastHandle, slowHandle;
double lastCrossPrice = 0;
bool waitingForRetrace = false;

// ==== Funkcja sprawdzająca czas ====
bool IsTimeToTrade() {
    MqlDateTime time;
    TimeToStruct(TimeCurrent(), time);
    int currentMinutes = time.hour * 60 + time.min;

    switch (time.day_of_week) {
        case 1:
            if (!enableMonday) return false;
            return currentMinutes >= (monStartHour * 60 + monStartMinute) &&
                   currentMinutes <= (monEndHour * 60 + monEndMinute);
        case 2:
            if (!enableTuesday) return false;
            return currentMinutes >= (tueStartHour * 60 + tueStartMinute) &&
                   currentMinutes <= (tueEndHour * 60 + tueEndMinute);
        case 3:
            if (!enableWednesday) return false;
            return currentMinutes >= (wedStartHour * 60 + wedStartMinute) &&
                   currentMinutes <= (wedEndHour * 60 + wedEndMinute);
        case 4:
            if (!enableThursday) return false;
            return currentMinutes >= (thuStartHour * 60 + thuStartMinute) &&
                   currentMinutes <= (thuEndHour * 60 + thuEndMinute);
        case 5:
            if (!enableFriday) return false;
            return currentMinutes >= (friStartHour * 60 + friStartMinute) &&
                   currentMinutes <= (friEndHour * 60 + friEndMinute);
        default:
            return false;
    }
}

// ==== OnInit ====
int OnInit() {
    fastHandle = iMA(_Symbol, _Period, FastMAPeriod, 0, MODE_EMA, PRICE_CLOSE);
    slowHandle = iMA(_Symbol, _Period, SlowMAPeriod, 0, MODE_EMA, PRICE_CLOSE);
    if (fastHandle == INVALID_HANDLE || slowHandle == INVALID_HANDLE) {
        Print("❌ Błąd tworzenia uchwytu MA");
        return INIT_FAILED;
    }
    return INIT_SUCCEEDED;
}

// ==== Główna logika ====
void OnTick() {
    if (!IsTimeToTrade()) return;

    double fastMA[2], slowMA[2];
    if (CopyBuffer(fastHandle, 0, 0, 2, fastMA) <= 0 ||
        CopyBuffer(slowHandle, 0, 0, 2, slowMA) <= 0) {
        Print("❌ Błąd pobierania danych MA");
        return;
    }

    double maFastCurrent = fastMA[0];
    double maFastPrevious = fastMA[1];
    double maSlowCurrent = slowMA[0];
    double maSlowPrevious = slowMA[1];
    double currentPrice = SymbolInfoDouble(_Symbol, SYMBOL_BID); // dla SELL używamy BID
    double retraceDistance = RetracePips * _Point * 10;

    bool hasPosition = PositionSelect(_Symbol);

    // Przecięcie w dół = SELL sygnał
    if (maFastPrevious > maSlowPrevious && maFastCurrent < maSlowCurrent) {
        lastCrossPrice = currentPrice;
        waitingForRetrace = true;
    }

    if (waitingForRetrace && !hasPosition) {
        if ((lastCrossPrice - currentPrice) >= retraceDistance) {
            OpenSell();
            waitingForRetrace = false;
        }
    }

    if (hasPosition && maFastPrevious > maSlowPrevious && maFastCurrent < maSlowCurrent) {
        CloseSell();
        waitingForRetrace = false;
    }
}

// ==== Otwieranie SELL z TP/SL ====
void OpenSell() {
    MqlTradeRequest request;
    MqlTradeResult result;
    ZeroMemory(request);
    ZeroMemory(result);

    double price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
    double sl = price + SL_Pips * _Point * 10;
    double tp = price - TP_Pips * _Point * 10;

    request.action = TRADE_ACTION_DEAL;
    request.symbol = _Symbol;
    request.volume = LotSize;
    request.type = ORDER_TYPE_SELL;
    request.price = price;
    request.sl = NormalizeDouble(sl, _Digits);
    request.tp = NormalizeDouble(tp, _Digits);
    request.deviation = Slippage;
    request.magic = 123456;
    request.type_filling = ORDER_FILLING_IOC;

    if (!OrderSend(request, result) || result.retcode != TRADE_RETCODE_DONE) {
        Print("❌ Błąd otwierania SELL: ", result.retcode);
    } else {
        Print("✅ SELL otwarty: ", request.price, " SL: ", request.sl, " TP: ", request.tp);
    }
}

// ==== Zamykanie SELL ====
void CloseSell() {
    if (!PositionSelect(_Symbol)) return;

    MqlTradeRequest request;
    MqlTradeResult result;
    ZeroMemory(request);
    ZeroMemory(result);

    request.action = TRADE_ACTION_DEAL;
    request.symbol = _Symbol;
    request.volume = PositionGetDouble(POSITION_VOLUME);
    request.type = ORDER_TYPE_BUY;
    request.price = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
    request.deviation = Slippage;
    request.position = PositionGetInteger(POSITION_TICKET);
    request.magic = 123456;
    request.type_filling = ORDER_FILLING_IOC;

    if (!OrderSend(request, result) || result.retcode != TRADE_RETCODE_DONE) {
        Print("❌ Błąd zamykania SELL: ", result.retcode);
    } else {
        Print("✅ SELL zamknięty: ", request.price);
    }
}

