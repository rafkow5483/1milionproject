#property copyright "Copyright 2022, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property indicator_chart_window


#property indicator_buffers 2;
#property indicator_plots 1;


#property indicator_color1 clrWhite, clrRed
#property indicator_label1 "Main"
#property indicator_style1 STYLE_SOLID
#property indicator_type1 DRAW_COLOR_LINE
#property indicator_width1 3 // wider for the wideo


input int                  InpFastMABars           = 10;
input ENUM_MA_METHOD       InpFastMAMethod         = MODE_SMA;
input ENUM_APPLIED_PRICE   InpFastMAAppliedPrice   = PRICE_CLOSE;


input int                  InpSlowMABars           = 50;
input ENUM_MA_METHOD       InpSlowMAMethod         = MODE_SMA;
input ENUM_APPLIED_PRICE   InpSlowMAAppliedPrice   = PRICE_CLOSE;


double         BufferMain[];
double         BufferColour[];


int            HandleFastMA;
int            HandleSlowMA;
double         ValuesFastMA[];
double         ValuesSLowMA[];



int OnInit()
  {

   SetIndexBuffer( 0, BufferMain, INDICATOR_DATA );
   SetIndexBuffer( 1, BufferColour, INDICATOR_COLOR_INDEX );
   
   ArraySetAsSeries( BufferMain, true );
   ArraySetAsSeries( BufferColour, true );
   
   HandleFastMA =
      iMA( Symbol(), Period(), InpFastMABars, 0, InpFastMAMethod, InpFastMAAppliedPrice );
   HandleSlowMA =
      iMA( Symbol(), Period(), InpSlowMABars, 0, InpSlowMAMethod, InpSlowMAAppliedPrice );
      
   ArraySetAsSeries( ValuesFastMA, true );
   ArraySetAsSeries( ValuesSLowMA, true );
   
   if ( HandleFastMA == INVALID_HANDLE || HandleSlowMA == INVALID_HANDLE) {
      Print( "Falied to create indicator handles" );
      return ( INIT_FAILED );
   }

   return(INIT_SUCCEEDED);
  }


void OnDeinit ( const int reason) {
   IndicatorRelease( HandleFastMA );
   IndicatorRelease( HandleSlowMA );

}


int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {

   int count = rates_total - prev_calculated;
   if ( prev_calculated > 0 ) count++;
   
   if ( CopyBuffer( HandleFastMA, 0, 0, count, ValuesFastMA) < count ) return ( 0 );
   if ( CopyBuffer( HandleSlowMA, 0, 0, count, ValuesSLowMA) < count ) return ( 0 );
   
   for ( int i = count - 1; i >= 0; i-- ) {
      
      double fast = ValuesFastMA[i];
      double slow = ValuesSLowMA[i];
      double ma   = ( fast + slow ) / 2;
      
      BufferMain[i] = ma;
      if ( fast > slow ) {
         BufferColour[i] = 0;
      }
      else{
         BufferColour[i] = 1;
      }
   
   }
   
   return(rates_total);
  }
